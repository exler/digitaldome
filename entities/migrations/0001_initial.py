# Generated by Django 5.2 on 2025-09-29 13:30

import django.core.validators
import django.db.models.functions.text
from django.db import migrations, models

import entities.models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BookTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("aliases", models.JSONField(blank=True, default=list)),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GameTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("aliases", models.JSONField(blank=True, default=list)),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MovieTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("aliases", models.JSONField(blank=True, default=list)),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Platform",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("aliases", models.JSONField(blank=True, default=list)),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="ShowTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("aliases", models.JSONField(blank=True, default=list)),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("slug", models.SlugField(max_length=128, unique=True)),
                (
                    "description",
                    models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(500)]),
                ),
                ("image", models.ImageField(blank=True, upload_to=entities.models.image_upload_destination)),
                ("wikipedia_url", models.URLField(blank=True, verbose_name="Wikipedia URL")),
                ("publish_date", models.DateField(blank=True, null=True)),
                ("goodreads_url", models.URLField(blank=True, verbose_name="Goodreads URL")),
                ("author", models.JSONField(blank=True, default=list)),
                ("tags", models.ManyToManyField(blank=True, to="entities.booktag")),
            ],
            options={
                "ordering": ("name", "-id"),
                "abstract": False,
                "constraints": [
                    models.UniqueConstraint(
                        django.db.models.functions.text.Lower("name"),
                        name="book_unique_name",
                        violation_error_message="Item with that name already exists.",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Movie",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("slug", models.SlugField(max_length=128, unique=True)),
                (
                    "description",
                    models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(500)]),
                ),
                ("image", models.ImageField(blank=True, upload_to=entities.models.image_upload_destination)),
                ("wikipedia_url", models.URLField(blank=True, verbose_name="Wikipedia URL")),
                ("release_date", models.DateField(blank=True, null=True)),
                ("imdb_url", models.URLField(blank=True, verbose_name="IMDB URL")),
                ("length", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("director", models.JSONField(blank=True, default=list)),
                ("cast", models.JSONField(blank=True, default=list)),
                ("tags", models.ManyToManyField(blank=True, to="entities.movietag")),
            ],
            options={
                "ordering": ("name", "-id"),
                "abstract": False,
                "constraints": [
                    models.UniqueConstraint(
                        django.db.models.functions.text.Lower("name"),
                        name="movie_unique_name",
                        violation_error_message="Item with that name already exists.",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("slug", models.SlugField(max_length=128, unique=True)),
                (
                    "description",
                    models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(500)]),
                ),
                ("image", models.ImageField(blank=True, upload_to=entities.models.image_upload_destination)),
                ("wikipedia_url", models.URLField(blank=True, verbose_name="Wikipedia URL")),
                ("release_date", models.DateField(blank=True, null=True)),
                ("steam_url", models.URLField(blank=True, verbose_name="Steam URL")),
                ("developer", models.JSONField(blank=True, default=list)),
                ("publisher", models.JSONField(blank=True, default=list)),
                ("tags", models.ManyToManyField(blank=True, to="entities.gametag")),
                ("platforms", models.ManyToManyField(blank=True, to="entities.platform")),
            ],
            options={
                "ordering": ("name", "-id"),
                "abstract": False,
                "constraints": [
                    models.UniqueConstraint(
                        django.db.models.functions.text.Lower("name"),
                        name="game_unique_name",
                        violation_error_message="Item with that name already exists.",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Show",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("slug", models.SlugField(max_length=128, unique=True)),
                (
                    "description",
                    models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(500)]),
                ),
                ("image", models.ImageField(blank=True, upload_to=entities.models.image_upload_destination)),
                ("wikipedia_url", models.URLField(blank=True, verbose_name="Wikipedia URL")),
                ("release_date", models.DateField(blank=True, null=True)),
                ("imdb_url", models.URLField(blank=True, verbose_name="IMDB URL")),
                ("creator", models.JSONField(blank=True, default=list)),
                ("stars", models.JSONField(blank=True, default=list)),
                ("tags", models.ManyToManyField(blank=True, to="entities.showtag")),
            ],
            options={
                "ordering": ("name", "-id"),
                "abstract": False,
                "constraints": [
                    models.UniqueConstraint(
                        django.db.models.functions.text.Lower("name"),
                        name="show_unique_name",
                        violation_error_message="Item with that name already exists.",
                    )
                ],
            },
        ),
    ]
